Index: core/roscpp/src/roscpp/msg_gen.py
===================================================================
--- core/roscpp/src/roscpp/msg_gen.py	(revision 10153)
+++ core/roscpp/src/roscpp/msg_gen.py	(working copy)
@@ -152,7 +152,7 @@
     s.write('#include "ros/message.h"\n')
     s.write('#include "ros/time.h"\n\n')
     
-def write_includes(s, spec):
+def write_includes(s, spec, serializer = 'ros'):
     """
     Writes the message-specific includes
     
@@ -160,15 +160,23 @@
     @type s: stream
     @param spec: The message spec to iterate over
     @type spec: roslib.msgs.MsgSpec
+    @param serializer: The serializer type for which to include headers
+    @type serializer: str
     """
     for field in spec.parsed_fields():
         if (not field.is_builtin):
             if (field.is_header):
-                s.write('#include "roslib/Header.h"\n')
+                if (serializer == 'ros'):
+                    s.write('#include "roslib/Header.h"\n')
+                else:
+                    s.write('#include "roslib/%s/Header.h"\n'%serializer)
             else:
                 (pkg, name) = roslib.names.package_resource_name(field.base_type)
                 pkg = pkg or spec.package # convert '' to package
-                s.write('#include "%s/%s.h"\n'%(pkg, name))
+                if (serializer == 'ros'):
+                    s.write('#include "%s/%s.h"\n'%(pkg, name))
+                else:
+                    s.write('#include "%s/%s/%s.h"\n'%(pkg, serializer, name))
                 
     s.write('\n') 
     
@@ -666,6 +674,41 @@
     s.write('} // namespace serialization\n')
     s.write('} // namespace ros\n\n')
     
+def write_boost_serialization(s, spec, cpp_name_prefix, file):
+    """
+    Writes the boost::serialize function for a message
+    
+    @param s: Stream to write to
+    @type s: stream
+    @param spec: The message spec
+    @type spec: roslib.msgs.MsgSpec
+    @param cpp_name_prefix: The C++ prefix to prepend to a message to refer to it (e.g. "std_msgs::")
+    @type cpp_name_prefix: str
+    """
+    (cpp_msg_unqualified, cpp_msg_with_alloc, _) = cpp_message_declarations(cpp_name_prefix, spec.short_name)
+    
+    s.write("/* Auto-generated by genmsg_cpp for file %s */\n"%(file))
+    s.write('#ifndef %s_BOOST_SERIALIZATION_%s_H\n'%(spec.package.upper(), spec.short_name.upper()))
+    s.write('#define %s_BOOST_SERIALIZATION_%s_H\n\n'%(spec.package.upper(), spec.short_name.upper()))
+    s.write('#include <boost/serialization/serialization.hpp>\n')
+    s.write('#include <boost/serialization/nvp.hpp>\n')
+    s.write('#include "../%s.h"\n'%spec.short_name)
+    write_includes(s, spec, 'boost');
+    s.write('namespace boost\n{\n')
+    s.write('namespace serialization\n{\n\n')
+    
+    s.write('template<class Archive, class ContainerAllocator>\n')
+
+    s.write('void serialize(Archive& a, %s & m, unsigned int)\n{\n'%(cpp_msg_with_alloc))
+    
+    for field in spec.parsed_fields():
+        s.write('    a & make_nvp("%s",m.%s);\n'%(field.name,field.name))
+    s.write('}\n\n')
+        
+    s.write('} // namespace serialization\n')
+    s.write('} // namespace boost\n\n')
+    s.write('#endif // %s_BOOST_SERIALIZATION_%s_H\n'%(spec.package.upper(), spec.short_name.upper()))
+    
 def write_ostream_operator(s, spec, cpp_name_prefix):
     (cpp_msg_unqualified, cpp_msg_with_alloc, _) = cpp_message_declarations(cpp_name_prefix, spec.short_name)
     s.write('template<typename ContainerAllocator>\nstd::ostream& operator<<(std::ostream& s, const %s& v)\n{\n'%(cpp_msg_with_alloc))
@@ -713,9 +756,35 @@
     
     s.close()
 
+def generate_boost_serialization(msg_path):
+    """
+    Generate a boost::serialization header
+    
+    @param msg_path: The path to the .msg file
+    @type msg_path: str
+    """
+    (package_dir, package) = roslib.packages.get_dir_pkg(msg_path)
+    (_, spec) = roslib.msgs.load_from_file(msg_path, package)
+    cpp_prefix = '%s::'%(package)
+    
+    s = StringIO()
+    write_boost_serialization(s, spec, cpp_prefix, msg_path)
+    
+    output_dir = '%s/msg_gen/cpp/include/%s/boost'%(package_dir, package)
+    try:
+        os.makedirs(output_dir)
+    except OSError, e:
+        pass
+         
+    f = open('%s/%s.h'%(output_dir, spec.short_name), 'w')
+    print >> f, s.getvalue()
+    
+    s.close()
+
 def generate_messages(argv):
     for arg in argv[1:]:
         generate(arg)
+        generate_boost_serialization(arg)
 
 if __name__ == "__main__":
     roslib.msgs.set_verbose(False)
Index: core/roslib/include/ros/serialization_boost.h
===================================================================
--- core/roslib/include/ros/serialization_boost.h	(revision 0)
+++ core/roslib/include/ros/serialization_boost.h	(revision 0)
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2010, Peter Soetens
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *   * Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *   * Neither the names of Willow Garage, Inc. nor the names of its
+ *     contributors may be used to endorse or promote products derived from
+ *     this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef ROSCPP_SERIALIZATION_BOOST_H
+#define ROSCPP_SERIALIZATION_BOOST_H
+
+#include "types.h"
+#include "time.h"
+
+#include <vector>
+#include <string>
+#include <boost/shared_array.hpp>
+#include <boost/serialization/serialization.hpp>
+#include <boost/serialization/vector.hpp>
+#include <boost/serialization/string.hpp>
+
+namespace boost {
+namespace serialization {
+    
+    /**
+     * Serializes the ros::Time type.
+     */
+    template<class Archive>
+      void serialize(Archive& a, ros::Time& t, unsigned int) {
+      a & t.sec;
+      a & t.nsec;
+    }
+
+    /**
+     * Serializes the ros::Duration type.
+     */
+    template<class Archive>
+      void serialize(Archive& a, ros::Duration& d, unsigned int) {
+      a & d.sec;
+      a & d.nsec;
+    }
+
+} // namespace serialization
+} // namespace boost
+
+#endif // ROSCPP_SERIALIZATION_BOOST_H
